//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookReviewWebClient.ReviewService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Review", Namespace="http://schemas.datacontract.org/2004/07/BookReviewService.Models")]
    [System.SerializableAttribute()]
    public partial class Review : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReviewByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReviewCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReviewOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReviewScaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReviewBy {
            get {
                return this.ReviewByField;
            }
            set {
                if ((object.ReferenceEquals(this.ReviewByField, value) != true)) {
                    this.ReviewByField = value;
                    this.RaisePropertyChanged("ReviewBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReviewComment {
            get {
                return this.ReviewCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.ReviewCommentField, value) != true)) {
                    this.ReviewCommentField = value;
                    this.RaisePropertyChanged("ReviewComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReviewOn {
            get {
                return this.ReviewOnField;
            }
            set {
                if ((object.ReferenceEquals(this.ReviewOnField, value) != true)) {
                    this.ReviewOnField = value;
                    this.RaisePropertyChanged("ReviewOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReviewScale {
            get {
                return this.ReviewScaleField;
            }
            set {
                if ((this.ReviewScaleField.Equals(value) != true)) {
                    this.ReviewScaleField = value;
                    this.RaisePropertyChanged("ReviewScale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReviewService.IReviewService")]
    public interface IReviewService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/SetReview", ReplyAction="http://tempuri.org/IReviewService/SetReviewResponse")]
        BookReviewWebClient.ReviewService.Review SetReview(BookReviewWebClient.ReviewService.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/SetReview", ReplyAction="http://tempuri.org/IReviewService/SetReviewResponse")]
        System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review> SetReviewAsync(BookReviewWebClient.ReviewService.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetMyReviews", ReplyAction="http://tempuri.org/IReviewService/GetMyReviewsResponse")]
        BookReviewWebClient.ReviewService.Review[] GetMyReviews(string currentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetMyReviews", ReplyAction="http://tempuri.org/IReviewService/GetMyReviewsResponse")]
        System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review[]> GetMyReviewsAsync(string currentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/EditReview", ReplyAction="http://tempuri.org/IReviewService/EditReviewResponse")]
        BookReviewWebClient.ReviewService.Review EditReview(string reviewOn, string currentUser, BookReviewWebClient.ReviewService.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/EditReview", ReplyAction="http://tempuri.org/IReviewService/EditReviewResponse")]
        System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review> EditReviewAsync(string reviewOn, string currentUser, BookReviewWebClient.ReviewService.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/DeleteReview", ReplyAction="http://tempuri.org/IReviewService/DeleteReviewResponse")]
        int DeleteReview(string reviewOn, string currentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/DeleteReview", ReplyAction="http://tempuri.org/IReviewService/DeleteReviewResponse")]
        System.Threading.Tasks.Task<int> DeleteReviewAsync(string reviewOn, string currentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/CountBookReviewScore", ReplyAction="http://tempuri.org/IReviewService/CountBookReviewScoreResponse")]
        int CountBookReviewScore(string BookName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/CountBookReviewScore", ReplyAction="http://tempuri.org/IReviewService/CountBookReviewScoreResponse")]
        System.Threading.Tasks.Task<int> CountBookReviewScoreAsync(string BookName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetBookReviews", ReplyAction="http://tempuri.org/IReviewService/GetBookReviewsResponse")]
        BookReviewWebClient.ReviewService.Review[] GetBookReviews(string BookName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetBookReviews", ReplyAction="http://tempuri.org/IReviewService/GetBookReviewsResponse")]
        System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review[]> GetBookReviewsAsync(string BookName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/DoesReviewExists", ReplyAction="http://tempuri.org/IReviewService/DoesReviewExistsResponse")]
        BookReviewWebClient.ReviewService.Review DoesReviewExists(string currentUser, string reviewOn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/DoesReviewExists", ReplyAction="http://tempuri.org/IReviewService/DoesReviewExistsResponse")]
        System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review> DoesReviewExistsAsync(string currentUser, string reviewOn);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReviewServiceChannel : BookReviewWebClient.ReviewService.IReviewService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReviewServiceClient : System.ServiceModel.ClientBase<BookReviewWebClient.ReviewService.IReviewService>, BookReviewWebClient.ReviewService.IReviewService {
        
        public ReviewServiceClient() {
        }
        
        public ReviewServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReviewServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReviewServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReviewServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BookReviewWebClient.ReviewService.Review SetReview(BookReviewWebClient.ReviewService.Review review) {
            return base.Channel.SetReview(review);
        }
        
        public System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review> SetReviewAsync(BookReviewWebClient.ReviewService.Review review) {
            return base.Channel.SetReviewAsync(review);
        }
        
        public BookReviewWebClient.ReviewService.Review[] GetMyReviews(string currentUser) {
            return base.Channel.GetMyReviews(currentUser);
        }
        
        public System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review[]> GetMyReviewsAsync(string currentUser) {
            return base.Channel.GetMyReviewsAsync(currentUser);
        }
        
        public BookReviewWebClient.ReviewService.Review EditReview(string reviewOn, string currentUser, BookReviewWebClient.ReviewService.Review review) {
            return base.Channel.EditReview(reviewOn, currentUser, review);
        }
        
        public System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review> EditReviewAsync(string reviewOn, string currentUser, BookReviewWebClient.ReviewService.Review review) {
            return base.Channel.EditReviewAsync(reviewOn, currentUser, review);
        }
        
        public int DeleteReview(string reviewOn, string currentUser) {
            return base.Channel.DeleteReview(reviewOn, currentUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteReviewAsync(string reviewOn, string currentUser) {
            return base.Channel.DeleteReviewAsync(reviewOn, currentUser);
        }
        
        public int CountBookReviewScore(string BookName) {
            return base.Channel.CountBookReviewScore(BookName);
        }
        
        public System.Threading.Tasks.Task<int> CountBookReviewScoreAsync(string BookName) {
            return base.Channel.CountBookReviewScoreAsync(BookName);
        }
        
        public BookReviewWebClient.ReviewService.Review[] GetBookReviews(string BookName) {
            return base.Channel.GetBookReviews(BookName);
        }
        
        public System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review[]> GetBookReviewsAsync(string BookName) {
            return base.Channel.GetBookReviewsAsync(BookName);
        }
        
        public BookReviewWebClient.ReviewService.Review DoesReviewExists(string currentUser, string reviewOn) {
            return base.Channel.DoesReviewExists(currentUser, reviewOn);
        }
        
        public System.Threading.Tasks.Task<BookReviewWebClient.ReviewService.Review> DoesReviewExistsAsync(string currentUser, string reviewOn) {
            return base.Channel.DoesReviewExistsAsync(currentUser, reviewOn);
        }
    }
}
